"""
–¢–µ—Å—Ç—ã –¥–ª—è TgProbot
"""

import pytest
import os
import sys
from unittest.mock import Mock, patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from main import send_email, get_main_reply_markup


class TestTgProbot:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""

    def test_get_main_reply_markup(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        markup = get_main_reply_markup()
        assert markup is not None
        assert len(markup.keyboard) == 2  # –î–≤–µ —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫
        assert len(markup.keyboard[0]) == 1  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        assert len(markup.keyboard[1]) == 1  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
        assert markup.keyboard[0][0].text == "üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üöÄ"
        assert markup.keyboard[1][0].text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"

    @pytest.mark.asyncio
    async def test_send_email_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
        with patch("smtplib.SMTP_SSL") as mock_smtp:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
            mock_server = MagicMock()
            mock_smtp.return_value.__enter__.return_value = mock_server

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            with patch.dict(
                os.environ,
                {
                    "EMAIL_HOST": "smtp.test.com",
                    "EMAIL_PORT": "587",
                    "EMAIL_USER": "test@test.com",
                    "EMAIL_PASSWORD": "test_password",
                    "EMAIL_TO": "recipient@test.com",
                },
            ):
                result = await send_email("Test Subject", "Test Message")
                assert result is True
                mock_server.login.assert_called_once()
                mock_server.send_message.assert_called_once()

    @pytest.mark.asyncio
    async def test_send_email_missing_config(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        with patch.dict(os.environ, {}, clear=True):
            result = await send_email("Test Subject", "Test Message")
            assert result is False

    @pytest.mark.asyncio
    async def test_send_email_smtp_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ SMTP"""
        with patch("smtplib.SMTP_SSL") as mock_smtp:
            mock_smtp.side_effect = Exception("SMTP Error")

            with patch.dict(
                os.environ,
                {
                    "EMAIL_HOST": "smtp.test.com",
                    "EMAIL_PORT": "587",
                    "EMAIL_USER": "test@test.com",
                    "EMAIL_PASSWORD": "test_password",
                    "EMAIL_TO": "recipient@test.com",
                },
            ):
                result = await send_email("Test Subject", "Test Message")
                assert result is False


class TestEnvironmentSetup:
    """–¢–µ—Å—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""

    def test_required_environment_variables(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = [
            "TOKEN",
            "EMAIL_HOST",
            "EMAIL_PORT",
            "EMAIL_USER",
            "EMAIL_PASSWORD",
            "EMAIL_TO",
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–æ–¥–µ
        from main import (
            EMAIL_HOST,
            EMAIL_PORT,
            EMAIL_USER,
            EMAIL_PASSWORD,
            EMAIL_TO,
            token_bot,
        )

        # –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å None, –Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        assert EMAIL_HOST is not None
        assert EMAIL_PORT is not None
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å None –≤ —Ç–µ—Å—Ç–∞—Ö, –Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã


if __name__ == "__main__":
    pytest.main([__file__])
