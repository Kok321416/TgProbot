from os import getenv, path
import logging
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(override=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL_HOST = getenv("EMAIL_HOST", "smtp.yandex.ru")
EMAIL_PORT = int(getenv("EMAIL_PORT", "465"))
EMAIL_USER = getenv("EMAIL_USER")
EMAIL_PASSWORD = getenv("EMAIL_PASSWORD")
EMAIL_TO = getenv("EMAIL_TO")
token_bot = getenv("TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATA_DIR = "./data"
(
    MAIN_MENU,
    PSYCHOLOGISTS_MENU,
    SOCIAL_PEDAGOGUES_MENU,
    DOCUMENTS_MENU,
    AWAITING_MESSAGE,
) = range(5)
user_states = {}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ data
if not path.exists(DATA_DIR):
    logger.warning(f"–ü–∞–ø–∫–∞ {DATA_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º...")
    try:
        os.makedirs(DATA_DIR, exist_ok=True)
        logger.info(f"–ü–∞–ø–∫–∞ {DATA_DIR} —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {DATA_DIR}: {e}")


async def send_email(subject: str, message_text: str) -> bool:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        logger.info("=" * 50)
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email...")
        logger.info(f"EMAIL_USER: {'‚úì' if EMAIL_USER else '‚úó'}")
        logger.info(f"EMAIL_PASSWORD: {'‚úì (—Å–∫—Ä—ã—Ç)' if EMAIL_PASSWORD else '‚úó'}")
        logger.info(f"EMAIL_TO: {EMAIL_TO if EMAIL_TO else '‚úó'}")
        logger.info(f"EMAIL_HOST: {EMAIL_HOST}")
        logger.info(f"EMAIL_PORT: {EMAIL_PORT}")
        logger.info("=" * 50)

        if not all([EMAIL_USER, EMAIL_PASSWORD, EMAIL_TO, EMAIL_HOST, EMAIL_PORT]):
            logger.error("‚ùå –ù–µ –≤—Å–µ email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            missing = []
            if not EMAIL_USER:
                missing.append("EMAIL_USER")
            if not EMAIL_PASSWORD:
                missing.append("EMAIL_PASSWORD")
            if not EMAIL_TO:
                missing.append("EMAIL_TO")
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
            return False

        msg = MIMEMultipart()
        msg["From"] = EMAIL_USER
        msg["To"] = EMAIL_TO
        msg["Subject"] = subject
        msg.attach(MIMEText(message_text, "plain", "utf-8"))

        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP: {EMAIL_HOST}:{EMAIL_PORT}")

        with smtplib.SMTP_SSL(EMAIL_HOST, EMAIL_PORT, timeout=30) as server:
            logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            server.send_message(msg)
            logger.info("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return True

    except smtplib.SMTPAuthenticationError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {e}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å EMAIL_USER –∏ EMAIL_PASSWORD")
        return False
    except smtplib.SMTPException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ SMTP: {e}")
        return False
    except Exception as e:
        logger.error(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e.__class__.__name__}: {e}"
        )
        import traceback

        logger.error(traceback.format_exc())
        return False


# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π print, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ


def get_main_reply_markup():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üöÄ")],
            [KeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],  # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        ],
        resize_keyboard=True,
        is_persistent=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...",
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_states[user_id] = MAIN_MENU

    welcome_message = (
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TgProbot!**\n\n"
        "ü§ñ **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:**\n"
        "‚Ä¢ üìÖ **–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é** –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º –ø–µ–¥–∞–≥–æ–≥–∞–º\n"
        "‚Ä¢ üß† **–ü—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã** –¥–ª—è —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
        "‚Ä¢ üìÑ **–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã** (–∑–∞—è–≤–ª–µ–Ω–∏—è, –ø–∞–º—è—Ç–∫–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)\n"
        "‚Ä¢ üí¨ **–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ** —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏\n"
        "‚Ä¢ üè¢ **–£–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã** –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n\n"
        "üöÄ **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!**"
    )

    await update.message.reply_text(
        welcome_message, reply_markup=get_main_reply_markup(), parse_mode="Markdown"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    if user_states.get(user_id) == AWAITING_MESSAGE:
        user = update.message.from_user
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        contact_info = []
        if user.first_name:
            contact_info.append(f"–ò–º—è: {user.first_name}")
        if user.last_name:
            contact_info.append(f"–§–∞–º–∏–ª–∏—è: {user.last_name}")
        if user.username:
            contact_info.append(f"–¢–µ–ª–µ–≥—Ä–∞–º: @{user.username}")

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        contact_text = (
            "\n".join(contact_info) if contact_info else "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        )

        subject = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"
        message = f"""
        –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
        {contact_text}

        –°–û–û–ë–©–ï–ù–ò–ï:
        {update.message.text}

        –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:
        ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}
        –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {update.message.date}
        """

        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email...")
        logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text}")

        email_success = await send_email(subject, message)

        if email_success:
            logger.info("Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏, –µ—Å–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ!",
                reply_markup=get_main_reply_markup(),
            )
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_reply_markup(),
            )

        user_states[user_id] = MAIN_MENU
    elif update.message.text == "üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üöÄ":
        await show_main_menu(update)
    elif update.message.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        user_states[user_id] = AWAITING_MESSAGE
        await update.message.reply_text(
            "‚úçÔ∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º:**\n\n"
            "üìã **–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:**\n"
            "‚Ä¢ –í–∞—à–µ –§–ò–û (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏)\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫)\n"
            "‚Ä¢ –°—É—Ç—å –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
            "üìß **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º**\n"
            "‚úÖ **–ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!**",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
            ),
            parse_mode="Markdown",
        )
    elif update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = MAIN_MENU
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_reply_markup()
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=get_main_reply_markup(),
        )


async def show_main_menu(update: Update):
    user_states[update.effective_user.id] = MAIN_MENU
    keyboard = [
        [
            InlineKeyboardButton(
                "üë®‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞", callback_data="psychologists"
            ),
            InlineKeyboardButton(
                "üë©‚Äçüè´ –°–æ—Ü–∏–∞–ª—å–Ω–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞",
                callback_data="social_pedagogues",
            ),
        ]
        # –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "‚úâÔ∏è –û–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å –∑–∞–ø—Ä–æ—Å–æ–º"
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:", reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üéØ **–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–¥–µ–ª —Å–æ—Ü–∏–∞–ª—å–Ω–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã, –º—ã —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª–∞ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–∞–º –ø–æ–º–æ—á—å:**\n\n"
            "üë®‚Äç‚öïÔ∏è **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞** - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, —Ç–µ—Å—Ç—ã, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n"
            "üë©‚Äçüè´ **–°–æ—Ü–∏–∞–ª—å–Ω–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞** - –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n\n"
            "üí¨ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –Ω–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–∞, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å\n"
            "- –∂–∞–ª–æ–±—ã(—Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø–µ–¥–∞–≥–æ–≥–æ–≤)\n"
            "- –¥–ª—è –ø–µ–¥–∞–≥–æ–≥–æ–≤, –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º\n"
            "- –¥—Ä—É–≥–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ**"
            "–ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n",
            reply_markup=reply_markup,
            parse_mode="Markdown",
        )


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    current_state = user_states.get(user_id)

    if query.data == "back":
        if current_state in (PSYCHOLOGISTS_MENU, SOCIAL_PEDAGOGUES_MENU):
            await show_main_menu(update)
        elif current_state == DOCUMENTS_MENU:
            await show_social_pedagogues_menu(update)
    elif query.data == "psychologists":
        user_states[user_id] = PSYCHOLOGISTS_MENU
        await show_psychologists_menu(update)
    elif query.data == "social_pedagogues":
        user_states[user_id] = SOCIAL_PEDAGOGUES_MENU
        await show_social_pedagogues_menu(update)
    elif query.data == "documents":
        user_states[user_id] = DOCUMENTS_MENU
        await show_documents_menu(update)
    elif query.data == "get_guide":
        await send_photo(update, context)
    elif query.data == "get_application":
        await send_document(update, context)
    elif query.data == "psycho_tests":
        await show_psycho_test_menu(update)
    # –£–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ query.data == "send_message"
    elif query.data == "cancel_message":
        await show_main_menu(update)


async def send_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        photo_path = path.join(DATA_DIR, "guide.jpg")
        if not path.exists(photo_path):
            await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            return

        with open(photo_path, "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption="–ü–∞–º—è—Ç–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç",
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


async def send_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        doc_path = path.join(DATA_DIR, "application.docx")
        if not path.exists(doc_path):
            await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ–∫—É–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        with open(doc_path, "rb") as doc:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=doc,
                filename="–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–∞—Ç. –ø–æ–º–æ—â—å.docx",
                caption="–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å",
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


async def show_psychologists_menu(update: Update):
    user_states[update.effective_user.id] = PSYCHOLOGISTS_MENU
    message = (
        "üë®‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥–∏:\n\n"
        "‚Ä¢ –ê–Ω–¥—Ä–∏–µ–≤—Å–∫–∏–π –ê.–ê. - 5-–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–∞—è (325 –∫–∞–±–∏–Ω–µ—Ç)\n"
        "‚Ä¢ –°—Ç–µ–ø–∞–Ω–µ—Ü –í.–ü. - 5-–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–∞—è (324 –∫–∞–±–∏–Ω–µ—Ç)\n\n"
        "‚Ä¢ –¢–µ–ø–ª—è–∫–æ–≤–∞ –ï.–ù. - —É–ª. –ó–≤–µ–∑–¥–∏–Ω—Å–∫–∞—è (215 –∫–∞–±–∏–Ω–µ—Ç)\n\n"
        "–£ –ê–Ω–¥—Ä–∏–µ–≤—Å–∫–æ–≥–æ –ê.–ê. –∏ –°—Ç–µ–ø–∞–Ω–µ—Ü –í.–ü. –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n\n"
    )
    keyboard = [
        [
            InlineKeyboardButton(
                "üìÖ –ê–Ω–¥—Ä–∏–µ–≤—Å–∫–∏–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è",
                url="https://calendar.app.google/mfryoPypDq1gmBRv9",
            ),
            InlineKeyboardButton(
                "üìÖ –°—Ç–µ–ø–∞–Ω–µ—Ü –∑–∞–ø–∏—Å–∞—Ç—å—Å—è",
                url="https://calendar.app.google/rUBavWmw5Uejk9Zp6",
            ),
        ],
        [InlineKeyboardButton("üß† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="psycho_tests")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    await update.callback_query.edit_message_text(
        text=message, reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_psycho_test_menu(update: Update):
    user_states[update.effective_user.id] = PSYCHOLOGISTS_MENU
    message = "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:"

    keyboard = [
        [
            InlineKeyboardButton(
                "–ò–†–ö–ü–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", url="https://irkpo.ru/test/psy"
            ),
            InlineKeyboardButton(
                "–°–ü–° (—Å–æ—Å—Ç–æ—è–Ω–∏—è)",
                url="https://psytests.org/emo/eyespsy-run.html?ysclid=makjgxwmo6267738449",
            ),
        ],
        [
            InlineKeyboardButton(
                "–î–µ–ø—Ä–µ—Å—Å–∏—è (–ë–µ–∫–∞)", url="https://psytests.org/depr/bdi-run.html"
            ),
            InlineKeyboardButton(
                "–°–ø–æ—Å–æ–±—ã —Å–æ–≤–ª–∞–¥–∞—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                url="https://psytests.org/coping/wcq-run.html",
            ),
        ],
        [
            InlineKeyboardButton(
                "–û–ø—Ä–æ—Å–Ω–∏–∫ –ê–∫—Ü–µ–Ω—Ç-2-90",
                url="https://psytests.org/accent/shmi90acc-run.html?ysclid=makklskzii872720319",
            ),
            InlineKeyboardButton(
                "–°–û–ü",
                url="https://psytests.org/parent/osopFf-run.html?ysclid=m6q6vdbfac18846130",
            ),
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="psychologists")
        ],  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
    ]

    await update.callback_query.edit_message_text(
        text=message, reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_social_pedagogues_menu(update: Update):
    user_states[update.effective_user.id] = SOCIAL_PEDAGOGUES_MENU
    message = (
        "üë©‚Äçüè´ –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–µ–¥–∞–≥–æ–≥: –î—É–Ω–∞–µ–≤—Å–∫–∞—è –ï–ª–µ–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞ –£–ª. 5-–∞—è –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–∞—è, –¥. 53 –∫–∞–±. 216\n"
        "üë©‚Äçüè´ –ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –°–ü–ü–°: –¢–µ–ø–ª—è—à–∏–Ω –î.–í.:\n\n"
    )
    keyboard = [
        [
            InlineKeyboardButton(
                "üí¨ –î—É–Ω–∞–µ–≤—Å–∫–∞—è –ï.–ù.", url="https://t.me/lina_dunaevskya"
            ),
            InlineKeyboardButton("üí¨ –¢–µ–ø–ª—è—à–∏–Ω –î.–í.", url="https://t.me/DVteplyi"),
        ],
        [InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="documents")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    await update.callback_query.edit_message_text(
        text=message, reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_documents_menu(update: Update):
    user_states[update.effective_user.id] = DOCUMENTS_MENU
    message = "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–µ–¥–∞–≥–æ–≥–æ–≤:"
    keyboard = [
        [
            InlineKeyboardButton(
                "üìù –ü–∞–º—è—Ç–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç",
                callback_data="get_guide",
            )
        ],
        [
            InlineKeyboardButton(
                "üìù –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–∞—Ç. –ø–æ–º–æ—â—å", callback_data="get_application"
            )
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
    ]
    await update.callback_query.edit_message_text(
        text=message, reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

        if update and hasattr(
            update, "effective_chat"
        ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–∞ effective_chat
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_reply_markup(),
            )
        else:
            logger.error("Update –∏–ª–∏ effective_chat –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ error_handler: {e}")


def main() -> None:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if not all([EMAIL_USER, EMAIL_PASSWORD, EMAIL_TO, token_bot]):
            logger.error("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            logger.error(f"EMAIL_USER: {'‚úì' if EMAIL_USER else '‚úó'}")
            logger.error(f"EMAIL_PASSWORD: {'‚úì' if EMAIL_PASSWORD else '‚úó'}")
            logger.error(f"EMAIL_TO: {'‚úì' if EMAIL_TO else '‚úó'}")
            logger.error(f"TOKEN: {'‚úì' if token_bot else '‚úó'}")
            sys.exit(1)

        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {EMAIL_USER}@{EMAIL_HOST}:{EMAIL_PORT}")
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        application = Application.builder().token(token_bot).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        )
        application.add_handler(CallbackQueryHandler(button_click))
        application.add_error_handler(error_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling(
            poll_interval=1.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            timeout=30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
            drop_pending_updates=True,
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
